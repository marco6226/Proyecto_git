import { ElementRef, EventEmitter, OnChanges, SimpleChanges, ChangeDetectorRef, NgZone } from '@angular/core';
import { DomSanitizer, SafeUrl, SafeStyle } from '@angular/platform-browser';
import { CropperPosition, ImageCroppedEvent } from '../interfaces';
export declare type OutputType = 'base64' | 'file' | 'both';
export declare class ImageCropperComponent implements OnChanges {
    private sanitizer;
    private cd;
    private zone;
    private originalImage;
    private originalBase64;
    private moveStart;
    private maxSize;
    private originalSize;
    private setImageMaxSizeRetries;
    private cropperScaledMinWidth;
    private cropperScaledMinHeight;
    safeImgDataUrl: SafeUrl | string;
    marginLeft: SafeStyle | string;
    imageVisible: boolean;
    sourceImage: ElementRef;
    imageFileChanged: File;
    imageChangedEvent: any;
    imageBase64: string;
    format: 'png' | 'jpeg' | 'bmp' | 'webp' | 'ico';
    outputType: OutputType;
    maintainAspectRatio: boolean;
    aspectRatio: number;
    resizeToWidth: number;
    resizeToHeight: number;
    cropperMinWidth: number;
    cropperMinHeight: number;
    roundCropper: boolean;
    onlyScaleDown: boolean;
    imageQuality: number;
    autoCrop: boolean;
    backgroundColor: string;
    containWithinAspectRatio: boolean;
    cropper: CropperPosition;
    alignImage: 'left' | 'center';
    startCropImage: EventEmitter<void>;
    imageCropped: EventEmitter<ImageCroppedEvent>;
    imageCroppedBase64: EventEmitter<string>;
    imageCroppedFile: EventEmitter<Blob>;
    imageLoaded: EventEmitter<void>;
    cropperReady: EventEmitter<void>;
    loadImageFailed: EventEmitter<void>;
    constructor(sanitizer: DomSanitizer, cd: ChangeDetectorRef, zone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    private initCropper;
    private loadImageFile;
    private isValidImageType;
    private checkExifAndLoadBase64Image;
    private fitImageToAspectRatio;
    private loadBase64Image;
    imageLoadedInView(): void;
    private checkImageMaxSizeRecursively;
    onResize(): void;
    rotateLeft(): void;
    rotateRight(): void;
    flipHorizontal(): void;
    flipVertical(): void;
    private transformBase64;
    private resizeCropperPosition;
    private resetCropperPosition;
    startMove(event: any, moveType: string, position?: string | null): void;
    moveImg(event: any): void;
    private setMaxSize;
    private setCropperScaledMinSize;
    private setCropperScaledMinWidth;
    private setCropperScaledMinHeight;
    private checkCropperPosition;
    moveStop(): void;
    private move;
    private resize;
    private checkAspectRatio;
    private doAutoCrop;
    crop(outputType?: OutputType): ImageCroppedEvent | Promise<ImageCroppedEvent> | null;
    private getImagePosition;
    private cropToOutputType;
    private cropToBase64;
    private cropToFile;
    private getCanvasBlob;
    private getQuality;
    private getResizeRatio;
    private getClientX;
    private getClientY;
}
